@*
    Copyright (c) 2020 Apption Corporation

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
*@


@page "/pagination"
@using Elemental.Code
@inject IJSRuntime JSRuntime

    <div class="component pagination">
        <div class="title space">Pagination</div>
        <div class="showcase">            
            <Pagination PageStatus="pageStatus" OnPageClicked="OnPageClicked" />
        </div>
        <div class="source">
            <div class="title">Source</div>
            <pre><code class="language-html">@(@"
<Pagination 
    PageStatus=""pageStatus"" 
    OnPageClicked=""OnPageClicked"" 
/>
")</code></pre>
            <pre><code class="language-csharp">@(@"@code{

    
private List<DummyData> GetOverflowData()
    {
        var result = new List<DummyData>();

        for (var i = 0; i < 100; i++)
        {
            result.AddRange(dummyData.Select(d => d));
        }
        return result;
    }

    private PageStatus pageStatus;
    private List<DummyData> items;

    protected override void OnInitialized()
    {
        var pageSize = 15;
        var totalItems = GetOverflowData().Count();
        var pageCount = (int)Math.Ceiling((double)totalItems / pageSize);
        pageStatus = new PageStatus(pageCount, pageSize);
    }

    private void OnPageClicked(int cur)
    {
        pageStatus.CurrentPage = cur;
    }

    // Typeparam class to hold row data, can be anything
    private List<DummyData> dummyData = new List<DummyData>
    {
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 0, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 0, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 0, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 0, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 1, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 1, Location = ""SQLDEV_1/COSTS"", Type = ""Finance"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 2, Location = ""SQLDEV_1/COSTS"", Type = ""Finance"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 3, Location = ""SQLDEV_1/COSTS"", Type = ""Finance"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 0, Location = ""SQLDEV_1/PROFITS"", Type = ""Finance"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 3, Location = ""SQLDEV_1/PROFITS"", Type = ""Finance"" },
    };

}")</code></pre>
        </div>
    </div>


@code {
    private List<DummyData> GetOverflowData()
    {
        var result = new List<DummyData>();

        for (var i = 0; i < 100; i++)
        {
            result.AddRange(dummyData.Select(d => d));
        }
        return result;
    }

    private PageStatus pageStatus;
    private List<DummyData> items;

    protected override void OnInitialized()
    {
        var pageSize = 15;
        var totalItems = GetOverflowData().Count();
        var pageCount = (int)Math.Ceiling((double)totalItems / pageSize);
        pageStatus = new PageStatus(pageCount, pageSize);
    }

    private void OnPageClicked(int cur)
    {
        pageStatus.CurrentPage = cur;
    }

    // Typeparam class to hold row data, can be anything
    private List<DummyData> dummyData = new List<DummyData>
    {
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 1, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 1, Location = "SQLDEV_1/COSTS", Type = "Finance" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 2, Location = "SQLDEV_1/COSTS", Type = "Finance" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/COSTS", Type = "Finance" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 0, Location = "SQLDEV_1/PROFITS", Type = "Finance" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/PROFITS", Type = "Finance" },
    };    

    class DummyData
    {
        public string Type { get; set; }
        public string Category { get; set; }
        public string CategoryIconClass { get; set; }
        public string Location { get; set; }
        public int Importance { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("initHighlight");
        if (firstRender)
        {
            StateHasChanged();
        }
    }
}
