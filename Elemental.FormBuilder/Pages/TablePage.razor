@*
    Copyright (c) 2020 Apption Corporation

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
*@


@page "/table"
@using Elemental.Code
@inject IJSRuntime JSRuntime

    <div class="component table">
        <div class="title">Table</div>
        <div class="showcase">
            <Table Accessors="accessorFunctions"
                   Renderers="renderFunctions"
                   ColorAccessor="colorFunction"
                   Dataset="dummyData"
                   Headers="headers" />
        </div>
        <div class="source">
            <div class="title">Source</div>
            <pre><code class="language-html">@(@"
// Note:
// If you see a scrollbar inside an data field, you can eliminate them by specifying a RowHeight field
// because all the fields have a fixed height. The default RowHeight is 33 in px, and the default table
// height (MaxHeight) is 600 in px.
// See example in the below section
<Table 
    Accessors=""accessorFunctions"" 
    Renderers=""renderFunctions"" 
    ColorAccessor=""colorFunction"" 
    Dataset=""dummyData"" 
    Headers=""headers"" 
/>")</code></pre>
            <pre><code class="language-csharp">@(@"@code {

    // Define the headers at the top of the table
    private List<string> headers = new List<string>
    {
        ""Type"", ""Category"", ""Location""
    };

    // Typeparam class to hold row data, can be anything
    private List<DummyData> dummyData = new List<DummyData>
    {
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 0, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 0, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 0, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 0, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 1, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 1, Location = ""SQLDEV_1/COSTS"", Type = ""Finance"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 2, Location = ""SQLDEV_1/COSTS"", Type = ""Finance"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 3, Location = ""SQLDEV_1/COSTS"", Type = ""Finance"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 0, Location = ""SQLDEV_1/PROFITS"", Type = ""Finance"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 3, Location = ""SQLDEV_1/PROFITS"", Type = ""Finance"" },
    };

    // Accessor functions to retrieve cell value
    private List<Func<DummyData, string>> accessorFunctions = new List<Func<DummyData, string>>
    {
        new Func<DummyData, string>(dummyData => { return dummyData.Type; }),
        new Func<DummyData, string>(dummyData => { return dummyData.Category; }),
        new Func<DummyData, string>(dummyData => { return dummyData.Location; }),
    };

    // [Optional] Can define custom rendering for columns, order matters
    private List<Func<DummyData, RenderFragment>> renderFunctions = new List<Func<DummyData, RenderFragment>>
    {
        null,
        new Func<DummyData, RenderFragment>(dummyData => { return @<i class=""@dummyData.CategoryIconClass""></i>; }),
        null,
    };

    // [Optional] Can define custom colors per row
    private Func<DummyData, Table<DummyData>.RowColor> colorFunction = dummyData =>
    {
        switch (dummyData.Importance)
        {
            case 3:
                return Table<DummyData>.RowColor.Red;
            case 2:
                return Table<DummyData>.RowColor.Yellow;
            case 1:
                return Table<DummyData>.RowColor.Blue;
            case 0:
            default:
                return Table<DummyData>.RowColor.Default;
        }
    };


    class DummyData
    {
        public string Type { get; set; }
        public string Category { get; set; }
        public string CategoryIconClass { get; set; }
        public string Location { get; set; }
        public int Importance { get; set; }
    }
}")</code></pre>
            <h3>_Host.cshtml</h3>
            <pre><code class="language-html">@(@"
//Add this line to the end of head
<script src=""_content/Apption.Elemental/js/virtualScrolling.js""></script>
         
")</code></pre>
            
        </div>

        <div class="title space">Table Overflow with Virtual Scrolling</div>
        <div class="showcase">
            <Table Accessors="accessorFunctions"
                   Renderers="renderFunctions"
                   ColorAccessor="colorFunction"
                   Dataset="GetOverflowData()"
                   Headers="headers"
                   MaxHeight="600"
                   RowHeight="36"/>
        </div>
        <div class="source">
            <div class="title">Source</div>
            <pre><code class="language-html">@(@"<Table 
    Accessors=""accessorFunctions"" 
    Renderers=""renderFunctions"" 
    ColorAccessor=""colorFunction"" 
    Dataset=""GetOverflowData()"" 
    Headers=""headers"" 
    MaxHeight=""600""
    RowHeight=""36""
/>")</code></pre>
            <pre><code class="language-csharp">@(@"@code{

    private List<DummyData> GetOverflowData()
    {
        var result = new List<DummyData>();

        for(var i=0;i < 100; i++)
        {
            result.AddRange(dummyLongData.Select(d => d));
        }
        return result;
    }

    // Typeparam class to hold row data, can be anything
    private List<DummyData> dummyLongData = new List<DummyData>
    {
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 0, Location = @""Lorem ipsum dolor sit amet, consectetur adipiscing elit.Curabitur ut tortor quis quam lacinia posuere.
Lorem ipsum dolor sit amet, consectetur adipiscing elit.Nunc augue tortor, gravida ut convallis sit amet, sodales nec diam.Nulla facilisi. Vivamus eget dolor sollicitudin, vehicula libero eu, tristique turpis.
Pellentesque gravida, mauris et sollicitudin sollicitudin, nibh velit feugiat nisl, ac semper tellus enim quis orci.Sed ultricies magna sit amet tortor dapibus accumsan. Pellentesque quis tincidunt libero. 
Duis volutpat turpis vitae pulvinar faucibus. Donec viverra scelerisque tellus, non rhoncus ante placerat eu.Nullam tortor massa, volutpat at rhoncus ut, pharetra sed erat. Ut luctus odio nec velit semper,
sit amet pellentesque felis tempor. Donec feugiat lectus in dignissim condimentum. Vestibulum quis consectetur ligula, sed tincidunt tortor. Suspendisse eu urna rhoncus, tristique mi sed, ullamcorper nibh.
Proin dolor risus, hendrerit sed libero ornare, eleifend tincidunt dolor. Etiam sodales mi molestie consectetur dapibus. Aliquam a suscipit odio. Sed nunc quam, convallis id nunc quis, porta blandit dolor. 
Quisque mollis non tortor at lobortis. Morbi viverra risus sed sapien varius, eget fringilla quam efficitur."", Type = ""Number"" },
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 0, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 0, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 0, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Hashtag"", CategoryIconClass=""fa fa-hashtag"", Importance = 1, Location = ""FILESYSTEM"", Type = ""Number"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 1, Location = @""Sed ultricies magna sit amet tortor dapibus accumsan. Pellentesque quis tincidunt libero. 
Duis volutpat turpis vitae pulvinar faucibus. Donec viverra scelerisque tellus, non rhoncus ante placerat eu.Nullam tortor massa, volutpat at rhoncus ut, pharetra sed erat. Ut luctus odio nec velit semper,
sit amet pellentesque felis tempor. Donec feugiat lectus in dignissim condimentum. Vestibulum quis consectetur ligula, sed tincidunt tortor. Suspendisse eu urna rhoncus, tristique mi sed, ullamcorper nibh."", Type = ""Finance"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 2, Location = ""SQLDEV_1/COSTS"", Type = ""Finance"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 3, Location = ""SQLDEV_1/COSTS"", Type = ""Finance"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 0, Location = ""SQLDEV_1/PROFITS"", Type = ""Finance"" },
        new DummyData { Category = ""Dollar"", CategoryIconClass=""fa fa-dollar-sign"", Importance = 3, Location = ""SQLDEV_1/PROFITS"", Type = ""Finance"" },
    };

}")</code></pre>
        </div>

        <div class="title space">Table Overflow with Pagination</div>
        <div class="showcase">
            <Table Accessors="accessorFunctions"
                   Renderers="renderFunctions"
                   ColorAccessor="colorFunction"
                   Dataset="GetOverflowData().Page(pageStatus.CurrentPage-1, pageStatus.PageSize).ToList()"
                   Headers="headers"
                   MaxHeight="600"
                   RowHeight="36"/>
            <Pagination PageStatus="pageStatus" OnPageClicked="OnPageClicked" />
        </div>
        <div class="source">
            <div class="title">Source</div>
            <pre><code class="language-html">@(@"<Table 
    Accessors=""accessorFunctions"" 
    Renderers=""renderFunctions"" 
    ColorAccessor=""colorFunction"" 
    Dataset=""GetOverflowData().Page(pageStatus.CurrentPage-1, pageStatus.PageSize).ToList()"" 
    Headers=""headers"" 
    MaxHeight=""600""
    RowHeight=""36""
/>
<Pagination 
    PageStatus=""pageStatus"" 
    OnPageClicked=""OnPageClicked"" 
/>
")</code></pre>
            <pre><code class="language-csharp">@(@"@code{

    private List<DummyData> GetOverflowData()
    {
        var result = new List<DummyData>();

        for(var i=0;i < 100; i++)
        {
            result.AddRange(dummyLongData.Select(d => d));
        }
        return result;
    }

    private Elemental.Code.PageStatus pageStatus;
    private List<DummyData> items;

    protected override void OnInitialized()
    {
        var pageSize = 15;
        var totalItems = GetOverflowData().Count();
        var pageCount = (int)Math.Ceiling((double)totalItems / pageSize);
        pageStatus = new Elemental.Code.PageStatus(pageCount, pageSize);
    }

    private void OnPageClicked(int cur)
    {
        pageStatus.CurrentPage = cur;
    }

}")</code></pre>
        </div>

    </div>


@code {
    
    private List<DummyData> GetOverflowData()
    {
        var result = new List<DummyData>();

        for (var i = 0; i < 100; i++)
        {
            result.AddRange(dummyLongData.Select(d => d));
        }
        return result;
    }

    private PageStatus pageStatus;
    private List<DummyData> items;

    protected override void OnInitialized()
    {
        var pageSize = 15;
        var totalItems = GetOverflowData().Count();
        var pageCount = (int)Math.Ceiling((double)totalItems / pageSize);
        pageStatus = new PageStatus(pageCount, pageSize);
    }

    private void OnPageClicked(int cur)
    {
        pageStatus.CurrentPage = cur;
    }



    // Define the headers at the top of the table
    private List<string> headers = new List<string>
    {
        "Type", "Category", "Location"
    };

    // Typeparam class to hold row data, can be anything
    private List<DummyData> dummyData = new List<DummyData>
    {
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 1, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 1, Location = "SQLDEV_1/COSTS", Type = "Finance" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 2, Location = "SQLDEV_1/COSTS", Type = "Finance" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/COSTS", Type = "Finance" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 0, Location = "SQLDEV_1/PROFITS", Type = "Finance" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/PROFITS", Type = "Finance" },
    };

    private List<DummyData> dummyLongData = new List<DummyData>
    {
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 0, Location = @"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur ut tortor quis quam lacinia posuere. 
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc augue tortor, gravida ut convallis sit amet, sodales nec diam. Nulla facilisi. Vivamus eget dolor sollicitudin, vehicula libero eu, tristique turpis. 
Pellentesque gravida, mauris et sollicitudin sollicitudin, nibh velit feugiat nisl, ac semper tellus enim quis orci. Sed ultricies magna sit amet tortor dapibus accumsan. Pellentesque quis tincidunt libero. 
Duis volutpat turpis vitae pulvinar faucibus. Donec viverra scelerisque tellus, non rhoncus ante placerat eu.Nullam tortor massa, volutpat at rhoncus ut, pharetra sed erat. Ut luctus odio nec velit semper, 
sit amet pellentesque felis tempor. Donec feugiat lectus in dignissim condimentum. Vestibulum quis consectetur ligula, sed tincidunt tortor. Suspendisse eu urna rhoncus, tristique mi sed, ullamcorper nibh. 
Proin dolor risus, hendrerit sed libero ornare, eleifend tincidunt dolor. Etiam sodales mi molestie consectetur dapibus. Aliquam a suscipit odio. Sed nunc quam, convallis id nunc quis, porta blandit dolor. 
Quisque mollis non tortor at lobortis. Morbi viverra risus sed sapien varius, eget fringilla quam efficitur.", Type = "Number" },
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Hashtag", CategoryIconClass="fa fa-hashtag", Importance = 1, Location = "FILESYSTEM", Type = "Number" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 1, Location = @"Sed ultricies magna sit amet tortor dapibus accumsan. Pellentesque quis tincidunt libero. 
Duis volutpat turpis vitae pulvinar faucibus. Donec viverra scelerisque tellus, non rhoncus ante placerat eu.Nullam tortor massa, volutpat at rhoncus ut, pharetra sed erat. Ut luctus odio nec velit semper,
sit amet pellentesque felis tempor. Donec feugiat lectus in dignissim condimentum. Vestibulum quis consectetur ligula, sed tincidunt tortor. Suspendisse eu urna rhoncus, tristique mi sed, ullamcorper nibh.", Type = "Finance" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 2, Location = "SQLDEV_1/COSTS", Type = "Finance" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/COSTS", Type = "Finance" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 0, Location = "SQLDEV_1/PROFITS", Type = "Finance" },
        new DummyData { Category = "Dollar", CategoryIconClass="fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/PROFITS", Type = "Finance" },
    };

    // Accessor functions to retrieve cell value
    private List<Func<DummyData, string>> accessorFunctions = new List<Func<DummyData, string>>
    {
        new Func<DummyData, string>(dummyData => { return dummyData.Type; }),
        new Func<DummyData, string>(dummyData => { return dummyData.Category; }),
        new Func<DummyData, string>(dummyData => { return dummyData.Location; }),
    };

    // [Optional] Can define custom rendering for columns, order matters
    private List<Func<DummyData, RenderFragment>> renderFunctions = new List<Func<DummyData, RenderFragment>>
    {
        null,
        new Func<DummyData, RenderFragment>(dummyData => { return @<i class="@dummyData.CategoryIconClass"></i>; }),
        null,
    };

    // [Optional] Can define custom colors per row
    private Func<DummyData, Table<DummyData>.RowColor> colorFunction = dummyData =>
    {
        switch (dummyData.Importance)
        {
            case 3:
                return Table<DummyData>.RowColor.Red;
            case 2:
                return Table<DummyData>.RowColor.Yellow;
            case 1:
                return Table<DummyData>.RowColor.Blue;
            case 0:
            default:
                return Table<DummyData>.RowColor.Default;
        }
    };


    class DummyData
    {
        public string Type { get; set; }
        public string Category { get; set; }
        public string CategoryIconClass { get; set; }
        public string Location { get; set; }
        public int Importance { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("initHighlight");
    }
}

