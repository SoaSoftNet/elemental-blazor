@typeparam T
@namespace Elemental.Components
@inject IJSRuntime JSRuntime

    <li class="tree-view-item">
        <div class="tree-view-item-content">
                
        @if (hasChildren)
        {
            <div class="caret" @onclick="async () => await ToggleCollapsed.InvokeAsync(Root)">
                <AeIcon Icon="@(IsCollapsed(Root)? "arrow-right-s" : "arrow-down-s")"></AeIcon>
            </div>
                 }
            @if (!isGeneric)
            {
                @if (isIcon)
                {
                    <div class="tree-view-icon">
                        <AeIcon Icon="@nodeIcon"></AeIcon>
                    </div>
                } 
                @if (isSelectable)
                {
                    <AeCheckbox IsChecked="isChecked" ItemSelected="checkboxSelected"/>
                }
                <div class="tree-view-node-text @(NodeIsClickable(Root)? "clickable" : "") @(IsBold(Root)? "bold" : "")" @onclick="async () => await NodeClicked.InvokeAsync(Root)">
                    @nodeString
                </div>
            }
            else {
                @RenderItem(Root)
            }
            </div>
    </li>
@if (hasChildren)
{
    <ul class="nested @(IsCollapsed(Root) ? "" : "active")">
        @foreach (var child in children)
        {
            <TreeItem FetchChildren="FetchChildren" RenderNode="RenderNode" RenderIcon="RenderIcon" Root="child"
            IsCollapsed="IsCollapsed" ToggleCollapsed="ToggleCollapsed" ItemChecked="ItemChecked"  IsChecked="IsChecked"
            NodeClicked="NodeClicked" RenderItem="RenderItem" IsBold="IsBold" NodeIsClickable="NodeIsClickable"/>
        }
    </ul>
    }


@code {
    [Parameter]
    public Func<T, IEnumerable<T>> FetchChildren { get; set; }

    [Parameter]
    public Func<T, string> RenderNode { get; set; }

    [Parameter]
    public Func<T, string> RenderIcon { get; set; }

    [Parameter]
    public T Root { get; set; }

    [Parameter]
    public Func<T, bool> IsCollapsed { get; set; }

    [Parameter]
    public EventCallback<T> ToggleCollapsed { get; set; }

    [Parameter]
    public EventCallback<(T, bool)> ItemChecked { get; set; }

    [Parameter]
    public Func<T, bool?> IsChecked { get; set; }

    [Parameter]
    public Func<T, bool> IsBold { get; set; }

    [Parameter]
    public EventCallback<T> NodeClicked { get; set; }

    [Parameter]
    public Func<T, RenderFragment> RenderItem { get; set; }

    [Parameter]
    public Func<T, bool> NodeIsClickable { get; set; }

    IEnumerable<T> children;

    string nodeString;
    string nodeIcon;
    string checkboxId;

    bool isSelectable;
    bool isIcon;
    bool hasChildren;
    bool isGeneric;


    protected override void OnInitialized()
    {
        checkboxId = "checkbox-" + this.GetHashCode();
        if (ItemChecked.HasDelegate)
        {
            isSelectable = true;
        }
        children = FetchChildren(Root);
        if (RenderNode!=null)
            nodeString = RenderNode(Root);
        if (RenderIcon != null) {
            nodeIcon = RenderIcon(Root);
            isIcon = true;
        }
        hasChildren =  children != null && children.Count() > 0;
        isGeneric = RenderItem != null;
    }

    private bool? isChecked()
    {
        return IsChecked(Root);
    }

    private async Task checkboxSelected()
    {
        await ItemChecked.InvokeAsync((Root, IsChecked(Root) == false));
    }


    }