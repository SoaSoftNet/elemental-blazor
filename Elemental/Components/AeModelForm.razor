@typeparam T

@using Elemental.Components.Forms
@using System.Reflection
@using Elemental.Components.FormsInternal
@using Microsoft.AspNetCore.Components.Forms
 
@if(Model != null)
{
    <EditForm Model="Model" OnValidSubmit="@OnValidSubmit" OnSubmit="@OnSubmit" OnInvalidSubmit="@OnInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @foreach (var prop in GetProperties())
        {
            <p>
            <div class="e e-property">
                @if (prop.PropertyType == typeof(string))
                {
                    <AeStringPropertyInput PropertyInfo="prop" Instance="Model" />
                }
                @if (prop.PropertyType == typeof(int))
                {
                    <AeNumberPropertyInput PropertyInfo="prop" Instance="Model" />
                }
                @if (prop.PropertyType == typeof(bool))
                {
                    <AeBoolPropertyInput PropertyInfo="prop" Instance="Model" />
                }
                @if (prop.PropertyType == typeof(DateTime))
                {
                    <AeDateTimePropertyInput PropertyInfo="prop" Instance="Model" />
                }
            </div>
            </p>
        }
        <button type="Submit">@Submit</button>
    </EditForm>
}


@code {
    [Parameter]
    public T Model { get; set; }

    /// <summary>
    /// A callback that will be invoked when the form is submitted.
    ///
    /// If using this parameter, you are responsible for triggering any validation
    /// manually, e.g., by calling <see cref="EditContext.Validate"/>.
    /// </summary>
    [Parameter] public EventCallback<EditContext> OnSubmit { get; set; }

    /// <summary>
    /// A callback that will be invoked when the form is submitted and the
    /// <see cref="EditContext"/> is determined to be valid.
    /// </summary>
    [Parameter] public EventCallback<EditContext> OnValidSubmit { get; set; }

    /// <summary>
    /// A callback that will be invoked when the form is submitted and the
    /// <see cref="EditContext"/> is determined to be invalid.
    /// </summary>
    [Parameter] public EventCallback<EditContext> OnInvalidSubmit { get; set; }

    [Parameter] public string Submit { get; set; } //= "Submit";

    private List<PropertyInfo> GetProperties()
    {
        return typeof(T).GetProperties().Where(p => !AeLabelAttribute.IsDefined(p, typeof(AeFormIgnoreAttribute))).ToList();
    }
}

