@typeparam T

@using Elemental.Components.FormsInternal
@using Microsoft.AspNetCore.Components.Forms
 
@if(Model != null)
{
    <EditForm Model="Model" OnValidSubmit="@OnValidSubmit" OnSubmit="@OnSubmit" OnInvalidSubmit="@OnInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @foreach (var prop in typeof(T).GetProperties())
        {
            <div class="e e-property">
                @if (prop.PropertyType == typeof(string))
                {
                    <AeStringPropertyInput PropertyInfo="prop" Instance="Model" />
                }
                @if (prop.PropertyType == typeof(int))
                {
                    <AeNumberPropertyInput PropertyInfo="prop" Instance="Model" />
                }
                @if (prop.PropertyType == typeof(bool))
                {
                    <AeBoolPropertyInput PropertyInfo="prop" Instance="Model" />
                }
                @if (prop.PropertyType == typeof(DateTime))
                {
                    <AeDateTimePropertyInput PropertyInfo="prop" Instance="Model" />
                }
            </div>
        }
        <div class="ae flex  ">
        <button id="submit" class="ae button dark" style="margin-left: 4px; margin-bottom: 8px" type="submit">@SubmitLabel</button>
        @if (!string.IsNullOrWhiteSpace(CancelLabel) && OnCancel != null)
        {
            <button id="cancel" class="ae button dark" style="margin-left: 4px; margin-bottom: 8px"  @onclick="ReloadForm">@CancelLabel</button>            
        }
        </div>

    </EditForm>
}


@code {
    [Parameter]
    public T Model { get; set; }

    /// <summary>
    /// Text that will be displayed for the Submit button. Will be "Submit" by default
    /// </summary>
    [Parameter]
    public string SubmitLabel { get; set; } = "Submit";

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [Parameter]
    public string CancelLabel { get; set; } = null;

    private async Task ReloadForm()
    {
        Model= await OnCancel();
        this.StateHasChanged();
    }

    /// <summary>
    /// A callback that will be invoked when the form is cancelled
    ///
    /// This call is expected to revert all the changes to the Model instance and return a model before modifications
    /// </summary>
    [Parameter] public Func<Task<T>> OnCancel { get; set; }


    /// <summary>
    /// A callback that will be invoked when the form is submitted.
    ///
    /// If using this parameter, you are responsible for triggering any validation
    /// manually, e.g., by calling <see cref="EditContext.Validate"/>.
    /// </summary>
    [Parameter] public EventCallback<EditContext> OnSubmit { get; set; }

    /// <summary>
    /// A callback that will be invoked when the form is submitted and the
    /// <see cref="EditContext"/> is determined to be valid.
    /// </summary>
    [Parameter] public EventCallback<EditContext> OnValidSubmit { get; set; }

    /// <summary>
    /// A callback that will be invoked when the form is submitted and the
    /// <see cref="EditContext"/> is determined to be invalid.
    /// </summary>
    [Parameter] public EventCallback<EditContext> OnInvalidSubmit { get; set; }
}

