@inherits HtmlElement
<div class="@_Classname">
    @foreach(var page in _Tabs)
    {
        <AeButton OnClickEvent="() => {_ActivePage = page; OnTabSelected.InvokeAsync();}" class="@(page == _ActivePage? "blue active" : "dark")" Disabled="@(page.Disable)">
            @(page.Header) 
            &nbsp;
            @if(page.Deletable)
            { 
                <Span class="ae tab deletable" @onclick="() => page.RemoveTab()">&#10006</Span>
            } 
        </AeButton>  
    }
</div>
@if(_ActivePage is not null)
{
    <div class="@_ActivePage._Classname">@_ActivePage.Body</div>    
}
<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public int Page { get; set; }

    private string _Classname => $"ae tab-wrapper {_inputClass}";

    private List<AeTabPage> _Tabs { get; set; } = new List<AeTabPage>();

    private AeTabPage _ActivePage { get; set; }

    public EventCallback OnTabSelected { get; set; }

    public EventCallback OnTabRemoved { get; set; }

    public void AddTab(AeTabPage tab)
    {
        if (!(_Tabs.Any(t => t == tab || t.Key == tab.Key))) // checks for duplicate tabs / keys
        {
            _Tabs.Add(tab);
            if(_Tabs.Count == 1)
            {
                _ActivePage = tab;
            }
            else if (!string.IsNullOrWhiteSpace(Page))
            {
                if(_ActivePage.Key != Page)
                {
                    _ActivePage = tab;
                }
            }
            StateHasChanged();
        }
    }

    public void RemoveTab(AeTabPage tab)
    {
        if (_Tabs.Contains(tab))
        {
            _Tabs.Remove(tab);
            OnTabRemoved.InvokeAsync();
        }
    }
}