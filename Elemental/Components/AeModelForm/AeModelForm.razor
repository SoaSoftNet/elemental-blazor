@*
    Copyright 2020 Apption Corporation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*@

@typeparam T
@namespace Elemental.Components
@implements IDisposable

@inherits HtmlElement
@using Elemental.Components.AePageOutline
@using System.Reflection
@using Microsoft.AspNetCore.Components.Forms

@if (Model != null)
{
    @if (EnableOutline)
    {
        <AeCard class="outline-fixed">
            <Header>
                <AeTypography style="flex-grow: 1;">Form Navigation</AeTypography>
            </Header>
            <ChildContent>
                <AeOutlineId Anchors="_Anchors" />
            </ChildContent>
        </AeCard>
    }
    <div class="@_modelFormClass" id=@(EnableOutline? "Uncategorized":"")>
        <EditForm Model="Model" OnSubmit="@onSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="ae modelform-rows @_rowsClass">
                @foreach (var category in GetCategories())
                {
                    @if (!string.IsNullOrWhiteSpace(category.category))
                    {
                        string id = "";
                        @if (EnableOutline)
                        {
                            id = category.category;
                            if (!_Anchors.Any(a => a.Id == id))
                            {
                                _Anchors.Add((id, 
            @<AeTypography Variant="a">@id</AeTypography>
                                ));
                            }

                        }
                        <AeTypography Variant="h3" id="@id">@category.category</AeTypography>
                    }
                    @foreach (var props in category.properties)
                    {
                        <div class="ae modelform-row @RowColor">
                            @foreach (var prop in props)
                            {
                                <div class="ae modelform-col">
                                    <CascadingValue Value="@OnChange" Name="OnChangeCallback">
                                        <CascadingValue Value="@ModelFormContext" Name="ModelFormContext">
                                            <CascadingValue Value="@LabelForPropertyFunc" Name="LabelForPropertyFunc">
                                                <CascadingValue Value="@NotifyArg" Name="Notifier">
                                                    @if (!prop.IsEditable())
                                    {
                                        <AeStringPropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" Editable="false" />
                                    }
                                    else
                                    {
                                        @if (ModelFormContext.IsDropDown(prop))
                                        {
                                            <AeDropdownPropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                        }
                                        else
                                        {
                                            if (GetNonNullableType(prop) == typeof(string))
                                            {
                                                <AeStringPropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                            @if (prop.PropertyType == typeof(int))
                                            {
                                                <AeNumberPropertyInput T=int PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                            @if (prop.PropertyType == typeof(long))
                                            {
                                                <AeNumberPropertyInput T=long PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                            @if (prop.PropertyType == typeof(float))
                                            {
                                                <AeNumberPropertyInput T=float PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                            @if (prop.PropertyType == typeof(double))
                                            {
                                                <AeNumberPropertyInput T=double PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                            @if (prop.PropertyType == typeof(Decimal))
                                            {
                                                <AeNumberPropertyInput T=Decimal PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                            @if (prop.PropertyType == typeof(int?))
                                            {
                                                <AeNumberPropertyInput T=int? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                            @if (prop.PropertyType == typeof(long?))
                                            {
                                                <AeNumberPropertyInput T=long? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                            @if (prop.PropertyType == typeof(float?))
                                            {
                                                <AeNumberPropertyInput T=float? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                            @if (prop.PropertyType == typeof(double?))
                                            {
                                                <AeNumberPropertyInput T=double? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                            @if (prop.PropertyType == typeof(Decimal?))
                                            {
                                                <AeNumberPropertyInput T=Decimal? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                            @if (GetNonNullableType(prop) == typeof(bool))
                                            {
                                                <AeBoolPropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                            @if (GetNonNullableType(prop) == typeof(DateTime))
                                            {
                                                <AeDateTimePropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" />
                                            }
                                        }
                                    }
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </div>

                            }
                        </div>
                    }
                }
            </div>
            <div class="ae flex  ">
                <button id="submit" class="ae button dark" style="margin-left: 4px; margin-bottom: 8px" type="submit">@SubmitLabel</button>
                @if (!string.IsNullOrWhiteSpace(CancelLabel) && OnCancel != null)
                {
                    <button id="cancel" class="ae button dark" style="margin-left: 4px; margin-bottom: 8px" @onclick="ReloadForm">@CancelLabel</button>
                }
            </div>

        </EditForm>
    </div>
}


@code {
    private string _modelFormClass => $"ae modelform {_inputClass}";
    private string _rowsClass => $"{(LabelsOnTop ? "top-label" : "left-label")} {(Flexbox ? "flexbox" : "")}";
    public List<(string category, List<List<PropertyInfo>> properties)> GetCategories() =>
        typeof(T).GetAeModelFormCategories().Select(elem => (elem.category, 
                elem.properties.Select(l => l.Where(l => ModelFormContext.IsVisible(l)).ToList()).ToList()))
                .Where(elem => elem.Item2.Count > 0).ToList();
    

    private bool isConfigured = false;

    protected override async Task OnInitializedAsync()
    {
        if (EnableOutline)
        {
            _Anchors = new List<(string Id, RenderFragment ChildContent)>
        {
            ("Uncategorized", 
    @<AeTypography Variant="a">Uncategorized Fields</AeTypography>
    )
        };
        }


        ModelFormContext.RefreshModel = async () => await this.InvokeAsync(() => this.StateHasChanged());
        ModelFormContext.SetProperties(GetProperties());
        if (!isConfigured)
        {
            await OnConfigure.InvokeAsync(ModelFormContext);
            isConfigured = true;
        }
        NotifyArg = OnNotify;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) StateHasChanged();

    }

    public void Dispose() => ModelFormContext.Clear();

    [Parameter]
    public T Model { get; set; }

    [Parameter]
    public string RowColor { get; set; } = "blue";

    /// <summary>
    /// Text that will be displayed for the Submit button. Will be "Submit" by default
    /// </summary>
    [Parameter]
    public string SubmitLabel { get; set; } = "Submit";

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [Parameter]
    public string CancelLabel { get; set; } = null;

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [Parameter]
    public Func<string, string> LabelForPropertyFunc { get; set; } = null;

    private Func<ModelFormArgsInternal, Task> NotifyArg;

    private async Task ReloadForm()
    {
        _isCancelled = true;
        Model = await OnCancel();
        this.StateHasChanged();
    }

    /// <summary>
    /// A callback that will be invoked when the form is cancelled
    ///
    /// This call is expected to revert all the changes to the Model instance and return a model before modifications
    /// </summary>
    [Parameter] public Func<Task<T>> OnCancel { get; set; }

    /// <summary>
    /// A callback that will be invoked when the form is created
    ///
    /// This call is designed to let the user access the context and configure drop downs and other dynamic items
    /// </summary>
    [Parameter] public EventCallback<IModelFormContext> OnConfigure { get; set; }

    /// <summary>
    /// A callback that will be invoked when the form is submitted and the
    /// <see cref="EditContext"/> is determined to be valid.
    /// </summary>
    [Parameter] public EventCallback<EditContext> OnValidSubmit { get; set; }

    /// <summary>
    /// A callback that will be invoked when the form is submitted and the
    /// <see cref="EditContext"/> is determined to be invalid.
    /// </summary>
    [Parameter] public EventCallback<EditContext> OnInvalidSubmit { get; set; }

    /// <summary>
    /// There are two major layout options. Standard has line based with label / field and compact has a tabular layout with CSS flex.
    /// </summary>
    [Parameter] public ModelFormStyle ModelFormStyle { get; set; } = ModelFormStyle.Normal;

    public ModelFormContext<T> ModelFormContext { get; } = new ModelFormContext<T>();

    /// <summary>
    /// This method will be called when a property is changed.
    /// </summary>
    [Parameter] public EventCallback<ModelFormChangeArgs> OnChange { get; set; }

    [Parameter]
    public bool LabelsOnTop { get; set; }

    [Parameter]
    public bool Flexbox { get; set; }

    [Parameter]
    public bool EnableOutline { get; set; }

    [Parameter]
    public string OutlineStyle { get; set; }

    private bool _isCancelled = false;

    private List<(string Id, RenderFragment ChildContent)> _Anchors;

    private List<PropertyInfo> GetProperties()
    {
        return typeof(T).GetAeModelProperties();
    }

    private Type GetNonNullableType(PropertyInfo prop)
    {
        return AeModelFormTools.GetNonNullableType(prop);
    }

    private async Task onSubmit(EditContext editContext)
    {
        if (!_isCancelled)
        {
            bool isValid = editContext.Validate();
            if (isValid)
            {
                await OnValidSubmit.InvokeAsync(editContext);
            }
            else
            {
                await OnInvalidSubmit.InvokeAsync(editContext);
            }
        }
        else
        {
            _isCancelled = false;
        }
    }

    public async Task OnNotify(ModelFormArgsInternal iargs)
    {
        var args = new ModelFormChangeArgs() { Context = ModelFormContext, PropertyInfo = iargs.PropertyInfo, EditContext = iargs.EditContext };
        await OnChange.InvokeAsync(args);
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


}

