@typeparam T
@namespace Elemental.Components

@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Microsoft.AspNetCore.Components.Forms

<AeFormLabel PropertyInfo="@PropertyInfo" ShowOptional="false" />

@if (ValidDisplayValues != null)
{
    <Microsoft.AspNetCore.Components.Forms.InputSelect @bind-Value="InputSelectIndex"  class="ae input"> @*   Value="PropertyValue" ValueChanged="@((string value) => OnValueChanged(value))" *@
        @if (!AeModelFormTools.IsRequired(PropertyInfo))
            {
            <option value="@NO_VALUE">@GetPlaceholder()</option>
            }
        @for (int il = 0; il < ValidDisplayValues.Count; il++)
            {
            <option value="@il">@(ValidDisplayValues[il])</option>
            }        
    </Microsoft.AspNetCore.Components.Forms.InputSelect>
}
else
{
    <select class="ae input"><option value="">-</option></select>
}

<div class="errortext">
    <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(AeModelFormTools.GetExpression<object>(Instance,PropertyInfo))" />
</div>

@code {
    [Parameter]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; }

    [Parameter]
    public T Instance { get; set; }

    [Parameter] public ModelFormStyle ModelFormStyle { get; set; }

    public const int NO_VALUE = -1;

    private List<string> ValidDisplayValues { get; set; }

    private List<object> ActualValues { get; set; }

    private string GetPlaceholder()
    {
        var label = AeModelFormTools.GetPlaceHolder(PropertyInfo);
        if (string.IsNullOrWhiteSpace(label))
            return "-";
        return label;
    }    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //var firstValue = (ModelFormContext.GetDisplayValue(PropertyInfo,PropertyValue) is null) ? getValidValues()?.FirstOrDefault() : PropertyValue;
        if (firstRender && AeModelFormTools.IsRequired(PropertyInfo))
        {
            InputSelectIndex = ActualValues.IndexOf(PropertyInfo.GetValue(Instance));
            if (InputSelectIndex == -1)
                InputSelectIndex = AeModelFormTools.IsRequired(PropertyInfo)?0:NO_VALUE;    
        }
    }

    protected override async Task OnInitializedAsync()
    {
        valueChangedCallback = EventCallback.Factory.Create<object>(this, s => OnValueChanged(s));
        UpdateOptions();
        ModelFormContext.RegisterOptionComponent(PropertyInfo, this, () => UpdateOptions());
    }

    private void UpdateOptions()
    {
        var optValues = ModelFormContext.GetOptionValuesForProperty(PropertyInfo);
        ValidDisplayValues = optValues.labels;
        ActualValues = optValues.values;
        InputSelectIndex = ActualValues.IndexOf(PropertyInfo.GetValue(Instance));
        if (InputSelectIndex == -1)
            InputSelectIndex = AeModelFormTools.IsRequired(PropertyInfo)?0:NO_VALUE;        
    }

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [CascadingParameter(Name = "LabelForPropertyFunc")]
    public Func<string, string> LabelForPropertyFunc { get; set; } = null;

    [CascadingParameter(Name = "ModelFormContext")]
    public ModelFormContext<T> ModelFormContext { get; set; } = null;

    [CascadingParameter(Name = "Notifier")]
    public Func<ModelFormArgsInternal, Task> Notifier { get; set; }

    private string GetLabel(string value)
    {
        if (LabelForPropertyFunc != null)
        {
            return LabelForPropertyFunc(value);
        }
        else
        {
            return AeModelFormTools.Labelize(value);
        }
    }

    private EventCallback<object> valueChangedCallback;

    private async Task OnValueChanged(object value)
    {
        ModelFormContext.OnOptionPropertyChange(PropertyInfo, value);
        var changeArgs = new ModelFormArgsInternal() { PropertyInfo = PropertyInfo, EditContext = new EditContext(PropertyInfo) };
        await Notifier(changeArgs);
    }

    private int currentIndex = 0;

    public int InputSelectIndex
    {
        get => currentIndex; //PropertyInfo.GetValue(Instance);
        set
        {
            if (currentIndex != value)
            {
                currentIndex = value;
                if (currentIndex >= 0)
                {
                    PropertyInfo.SetValue(Instance, ActualValues[currentIndex]);
                    valueChangedCallback.InvokeAsync(ActualValues[currentIndex]);
                }
            }
            //OnChangeCallback.InvokeAsync(new ModelFormChangeArgs() { Context = ModelFormContext<T>, PropertyInfo = PropertyInfo, EditContext = new EditContext(PropertyInfo) });
        }
    }

    private string GetID() => PropertyInfo.Name;



    private int? HasStringLength()
    {
        var att = StringLengthAttribute.GetCustomAttribute(PropertyInfo, typeof(StringLengthAttribute)) as StringLengthAttribute;
        return att?.MaximumLength;
    }

}