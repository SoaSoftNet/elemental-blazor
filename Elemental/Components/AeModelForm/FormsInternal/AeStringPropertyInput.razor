@typeparam T
@using System.ComponentModel.DataAnnotations
@using Elemental.Code.Forms
@namespace Elemental.Components

<AeFormLabel PropertyInfo="@PropertyInfo" />

@if (!Editable)
{
    @if (AeModelFormTools.IsNumericType(PropertyInfo.PropertyType))
    {
        <Input disabled="true" Value="@GetFormattedValue()" class="ae input disabled" size="@AeModelFormTools.GetSize(PropertyInfo)" DisplayName="@GetLabel()" style="height:@AeModelFormTools.GetSize(PropertyInfo)px" />
    }
    else
    { 
        <div class="ae input disabled">
            @GetFormattedValue()
        </div>        
    }
}
else
{
@if (HasStringLength() is null)
{
    <Microsoft.AspNetCore.Components.Forms.InputTextArea @bind-Value="PropertyValue" class="ae input" placeholder="@AeModelFormTools.GetPlaceHolder(PropertyInfo)" cols="@AeModelFormTools.GetSize(PropertyInfo)" DisplayName="@GetLabel()" />
}
else
{
    <Microsoft.AspNetCore.Components.Forms.InputText @bind-Value="PropertyValue" type="@TextFieldType" class="ae input" placeholder="@AeModelFormTools.GetPlaceHolder(PropertyInfo)" size="@AeModelFormTools.GetSize(PropertyInfo)" DisplayName="@GetLabel()" />
}
<div class="errortext">
    <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(AeModelFormTools.GetExpression<string>(Instance, PropertyInfo))" />
</div>
}

@code {

    [Parameter]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; }

    [Parameter]
    public T Instance { get; set; }

    [Parameter] public ModelFormStyle ModelFormStyle { get; set; }

    [Parameter]
    public bool Editable { get; set; } = true;

    private string? TextFieldType { get
        {
            return AeModelFormTools.IsPasswordField(PropertyInfo)?"password":null;
        } }

    public string PropertyValue
    {
        get => PropertyInfo.GetValue(Instance) as string;
        set
        {
            PropertyInfo.SetValue(Instance, value);
        }
    }

    public string GetFormattedValue()
    {
        var value = PropertyInfo.GetValue(Instance);

        if (value is null)
            return string.Empty;

        var format = PropertyInfo.GetStringFormat();
        if (format is null)
        {
            return value.ToString();
        }
        else
        {
            if (AeModelFormTools.IsNumericType(PropertyInfo.PropertyType))
            {
                var num = Convert.ToDouble(PropertyInfo.GetValue(Instance));
                return num.ToString(format);
            }
            else
            {
                return value.ToString();
            }
        }


    }

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [CascadingParameter(Name = "LabelForPropertyFunc")]
    public Func<string, string> LabelForPropertyFunc { get; set; } = null;

    private string GetLabel()
    {
        return AeModelFormTools.GetLabel(PropertyInfo, LabelForPropertyFunc, false);
    }

    private string GetID() => PropertyInfo.Name;



    private int? HasStringLength()
    {
        var att = StringLengthAttribute.GetCustomAttribute(PropertyInfo, typeof(StringLengthAttribute)) as StringLengthAttribute;
        return att?.MaximumLength;
    }

}
