@using Elemental.Components.PasteAreaInternal;

<PasteAwareComponent OnContentPasted="FillTable">
    @if (_excelContent.Any() == false)
    {
        <div class="ae table">
            <p>CRTL + V clipboard into this box</p>
        </div>
    }
    else
    {
        <AeTable Accessors="pasteAccessors"
                 Dataset="_excelContent"
                 Headers="pasteHeaders"
                 SimpleTable="true">
        </AeTable>

        <AeFlex id="buttonBar">
            <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
                <FAButton Text="Import" Icon="fal fa-arrow-left" onclick="e => ImportRecords()" />
            </div>
            <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
                <FAButton Text="Cancel Import" Icon="far fa-plus-square" onclick="e => CancelImport()" />
            </div>
        </AeFlex>
    }
</PasteAwareComponent>

@code {

    [Parameter]
    public EventCallback<List<String[]>> ExcelContent { get; set; }
    [Parameter]
    public EventCallback CancelPaste { get; set; }

    private List<String[]> _excelContent = new List<String[]>();
    private List<Func<String[], string>> pasteAccessors = new List<Func<String[], string>>();
    private List<string> pasteHeaders = new List<string>();


    private Task ImportRecords()
    {
        var content = _excelContent;
        _excelContent.Clear();
        return ExcelContent.InvokeAsync(content);
    }

    private async Task CancelImport()
    {
        _excelContent.Clear();
        StateHasChanged();
    }

    private async Task PopulateAccessors()
    {
        var totalColumns = _excelContent[0].Length;
        for (int i = 0; i < totalColumns; i++)
        {
            var headerNumber = i + 1;
            int j = i;
            pasteHeaders.Add($"Header{headerNumber}");
            var func = new Func<String[], string>(p => { return p[j]; });
            pasteAccessors.Add(func);
        }
    }

    private async Task FillTable(IEnumerable<IDictionary<String, String>> content)
    {
        pasteAccessors.Clear();
        pasteHeaders.Clear();
        _excelContent.Clear();
        if (content == null || content.Count() != 1)
        {
            return;
        }

        var clipboardContent = content.ElementAt(0);
        IExcelContentParser parser = new ExcelTextContentParser();

        foreach (var item in clipboardContent)
        {
            if (parser.CanParse(item.Key) == false)
            {
                continue;
            }

            var parsedList = await parser.GetRows(item.Value);
            _excelContent = parsedList.ToList();
            await PopulateAccessors();

        }
    }
}
