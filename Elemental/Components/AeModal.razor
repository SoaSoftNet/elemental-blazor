@*
    Copyright (c) 2020 Apption Corporation

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
*@

@inject IJSRuntime JSRuntime
@if (_show)
{
    <div class="@_classname">
        @if (!_disableBackgroundCancel)
        {
            <div class="ae background" @onclick="CloseModal"></div>
        }
        else
        {
            <div class="ae background"></div>
        }
        <div class="ae wrapper">
            @if (_title != null)
            {
                <div class="ae title">
                    @_title
                </div>
            }
            <div class="ae content">
                @_content
            </div>
            <div class="ae footer">
                @if (!_hideCloseButton)
                {
                    <AeButton class="blue" OnClick="CloseModal">Close</AeButton>
                }
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private IModalService CascadedUIService { get; set; }



    private string _classname => $"ae modal {_inputClass}";
    private string _title;
    private RenderFragment _content;
    private bool _show;
    private bool _hideCloseButton;
    private bool _disableBackgroundCancel;
    private string _inputClass;

    protected override void OnInitialized()
    {
        if (CascadedUIService == null)
        {
            throw new InvalidOperationException($"{GetType()} requires a cascading parameter of type {nameof(IModalService)}.");
        }

        ((ModalService)CascadedUIService).OnModalShow += Update;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_show)
            await JSRuntime.InvokeVoidAsync("modalHelper.setModalPosition");

    }

    private async void Update(ModalParameter modal)
    {
        _content = modal.Content;
        _title = modal.Title;
        _hideCloseButton = modal.HideCloseButton;
        _disableBackgroundCancel = modal.DisableBackgroundCancel;
        _inputClass = modal.Class;

        _show = true;
        await JSRuntime.InvokeVoidAsync("modalHelper.lockBodyScrolling");
        await InvokeAsync(StateHasChanged);
    }

    private async void CloseModal()
    {
        _show = false;
        await JSRuntime.InvokeVoidAsync("modalHelper.unlockBodyScrolling");

        await InvokeAsync(StateHasChanged);
    }

}