@*
    Copyright (c) 2020 Apption Corporation

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
*@

@implements ITable
@inject IJSRuntime JSRuntime
@using System.Text
@typeparam T

<div class="@_tableClass">
    <div class="e table-header" style="@_headerStyle">
        @foreach (var (header, index) in Headers.Select((h, index) => (h, index)))
        {
            <div class="e table-cell" @onclick="() => ToggleSortOnColumn(index)">
                @header
                <span class="e table-sort"><i class="@GetSortIconClass(index)"></i></span>
            </div>
        }
    </div>
    <div class="e table-scroll" style="@_scrollStyle" @onscroll="OnScroll" @ref="tableRef">
        <div class="e table-rows" style="@_rowsStyle">
            @foreach (var row in Rows.Skip(scrollViewResult.SkipItems).Take(scrollViewResult.TakeItems).Select((item, i) => new { item, i }))
            {
                <div class="@GetRowColor(row.item)" style="@_rowStyle top:@((scrollViewResult.SkipItems + row.i) * RowHeight)px;" @onclick="(() => OnRowClick.InvokeAsync(row.item))">
                    @foreach (var (accessor, index) in Accessors.Select((a, i) => (a, i)))
                    {
                        if (Renderers?[index] is null)
                        {
                            <div class="e table-cell">@accessor?.Invoke(row.item)</div>
                        }
                        else
                        {
                            <div class="e table-cell">@Renderers[index](row.item)</div>
                        }
                    }
                </div>
            }
        </div>
    </div>
</div>





@code {
    [Parameter]
    public string GridTemplateColumns { get; set; }
    [Parameter]
    public List<string> Headers { get; set; }
    [Parameter]
    public List<Func<T, string>> Accessors { get; set; }
    [Parameter]
    public List<Func<T, RenderFragment>> Renderers { get; set; }
    [Parameter]
    public List<T> Dataset { get; set; }
    [Parameter]
    public Func<T, RowColor> ColorAccessor { get; set; }
    [Parameter]
    public int MaxHeight { get; set; } = 600;
    [Parameter]
    public int RowHeight { get; set; } = 33;  //In px
    [Parameter]
    public EventCallback<T> OnRowClick { get; set; }

    private string _tableClass => $"e table";
    private string _gridStyle => $"grid-template-columns: {GetGridTemplateColumns()};";
    private string _rowsStyle => $"{_gridStyle}; grid-template-rows: repeat({scrollViewResult.TakeItems},{RowHeight}px); height:{scrollViewResult.Height}px;";
    private string _rowStyle => $"{_gridStyle}; grid-template-rows:{RowHeight}px;";
    private string _scrollStyle => $"max-height: {MaxHeight}px;";
    private string _headerStyle => $"{_gridStyle}";

    private (int column, bool sortAscending) _sorting = (0, true);

    private ElementReference tableRef;
    private ScrollView scrollView;
    private ScrollViewResult scrollViewResult;
    private IEnumerable<T> Rows { get => GetSortedDataset(); }

    protected override void OnInitialized()
    {
        scrollView = new ScrollView();
        scrollViewResult = new ScrollViewResult();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        var tempHeight = Rows.Count() * RowHeight;
        if (firstRender || scrollViewResult.Height != tempHeight)
        {
            scrollView = await JSRuntime.InvokeAsync<ScrollView>("virtualScrolling.getScrollView", tableRef);

            scrollViewResult.Height = Rows.Count() * RowHeight;
            scrollViewResult.SkipItems = scrollView.ScrollTop / RowHeight;
            scrollViewResult.TakeItems = (int)Math.Ceiling((double)(scrollView.ScrollTop + MaxHeight) / (double)RowHeight) - scrollViewResult.SkipItems;
            StateHasChanged();
        }
    }


    private void ToggleSortOnColumn(int column)
    {
        if (column == _sorting.column)
        {
            _sorting.sortAscending = !_sorting.sortAscending;
        }
        else
        {
            _sorting.column = column;
            _sorting.sortAscending = true;
        }
        StateHasChanged();
    }

    private IEnumerable<T> GetSortedDataset()
    {
        if (_sorting.sortAscending)
        {
            return Dataset.OrderBy(data => Accessors[_sorting.column].Invoke(data));
        }
        else
        {
            return Dataset.OrderByDescending(data => Accessors[_sorting.column].Invoke(data));
        }
    }

    private string GetSortIconClass(int column)
    {
        if (column == _sorting.column)
        {
            return _sorting.sortAscending ? "fad fa-sort-down" : "fad fa-sort-up";
        }
        return "fad fa-sort";
    }

    private string GetGridTemplateColumns()
    {
        if (string.IsNullOrWhiteSpace(GridTemplateColumns))
        {
            return $"repeat({Headers?.Count ?? 1}, minmax(0, 1fr))";
        }
        else
        {
            return GridTemplateColumns;
        }
    }

    private string GetRowColor(T row)
    {
        string rowClass = "e table-row";
        switch (ColorAccessor?.Invoke(row))
        {
            case RowColor.Blue:
                return rowClass + " blue";
            case RowColor.Red:
                return rowClass + " red";
            case RowColor.Yellow:
                return rowClass + " yellow";
            default:
                return rowClass;
        }
    }

    public enum RowColor
    {
        Default,
        Red,
        Yellow,
        Blue
    }

    private async Task OnScroll()
    {
        scrollView = await JSRuntime.InvokeAsync<ScrollView>("virtualScrolling.getScrollView", tableRef);
        scrollViewResult.Height = Rows.Count() * RowHeight;
        scrollViewResult.SkipItems = scrollView.ScrollTop / RowHeight;
        scrollViewResult.TakeItems = (int)Math.Ceiling((double)(scrollView.ScrollTop + scrollView.ClientHeight) / (double)RowHeight) - scrollViewResult.SkipItems;
        StateHasChanged();
    }

    public byte[] ExportToCSVInByte()
    {
        var builder = new StringBuilder();
        (int column, bool sortAscending) _sorting = (0, true);

        foreach (var h in Headers)
        {
            builder.Append(h + ",");
        }
        //Remove the last ,
        builder.Length--;
        builder.Append(Environment.NewLine);

        foreach (var row in Dataset.OrderByDescending(data => Accessors[_sorting.column].Invoke(data)))
        {

            foreach (var (accessor, index) in Accessors.Select((a, i) => (a, i)))
            {
                var value = accessor?.Invoke(row);
                if (value.IndexOfAny(new char[] { '"', ',' }) != -1)
                {
                    builder.AppendFormat("\"{0}\"", value.Replace("\"", "\"\""));
                    builder.Append(",");
                }
                else
                {
                    builder.Append(accessor?.Invoke(row) + ",");
                }
            }
            //Remove the last ,
            builder.Length--;
            builder.Append(Environment.NewLine);
        }
        var bytes = Encoding.UTF8.GetBytes(builder.ToString());
        return bytes;
    }

    public class ScrollView
    {
        public int ClientHeight { get; set; }

        public int ScrollTop { get; set; }
    }

    public class ScrollViewResult
    {
        public int Height { get; set; }
        public int SkipItems { get; set; }
        public int TakeItems { get; set; }
    }
}
