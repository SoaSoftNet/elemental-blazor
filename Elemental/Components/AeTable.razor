@*
    Copyright 2020 Apption Corporation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*@

@inherits HtmlElement
@implements ITable
@inject IJSRuntime JSRuntime
@using System.Text
@typeparam T

<div class="@_tableClass" @attributes="InputAttributesWithoutClass">
    <div class="ae table-header @_simple" style="@_gridStyle">
        @if (SimpleTable)
        {
            <div class="corner">&nbsp;</div>
        }
        @foreach (var (header, index) in Headers.Select((h, index) => (h, index)))
        {
            @if (@CustomHeader != null)
            {
                @CustomHeader(header, index)
            }
            else
            {
                @defaultHeader(header, index)
            }
        }
    </div>
    <div class="ae table-scroll" style="@_scrollStyle" @onscroll="OnScroll" @ref="tableRef">
        <div class="ae table-rows" style="@_rowsStyle">
            @foreach (var row in Rows.Skip(scrollViewResult.SkipItems).Take(scrollViewResult.TakeItems).Select((item, i) => new { item, i }))
            {
                <div tabindex="0" class="@GetRowColor(row.item) @_simple" style="@_rowStyle top:@((scrollViewResult.SkipItems + row.i) * RowHeight)px;" @onclick="(() => OnRowClick.InvokeAsync(row.item))" @onfocus="(() => OnRowFocus.InvokeAsync(row.item))">

                    @if (SimpleTable)
                    {
                        <div class="ae table-cell row-label">@(row.i+1)</div>
                    }
                    @foreach (var (accessor, index) in Accessors.Select((a, i) => (a, i)))
                    {
                        if (Renderers?[index] is null)
                        {
                            <div class="ae table-cell">@accessor?.Invoke(row.item)</div>
                        }
                        else
                        {
                            <div class="ae table-cell">@Renderers[index](row.item)</div>
                        }
                    }
                </div>
            }
        </div>
    </div>
</div>





@code {
  [Parameter]
  public string GridTemplateColumns { get; set; }
  [Parameter]
  public List<string> Headers { get; set; }
  [Parameter]
  public List<Func<T, string>> Accessors { get; set; }
  [Parameter]
  public List<Func<T, RenderFragment>> Renderers { get; set; }
  [Parameter]
  public List<T> Dataset { get; set; }
  [Parameter]
  public Func<T, string> ColorAccessor { get; set; }
  [Parameter]
  public int MaxHeight { get; set; } = 600;
  [Parameter]
  public int RowHeight { get; set; } = 33;  //In px
  [Parameter]
  public EventCallback<T> OnRowClick { get; set; }
  [Parameter]
  public EventCallback<T> OnRowFocus { get; set; }
  [Parameter]
  public bool SimpleTable { get; set; } = false;
  [Parameter]
  public Func<string, int, RenderFragment> CustomHeader { get; set; } 

  private RenderFragment defaultHeader(string header, int index)
  {
      return  @<AeTypography class="table-cell" @onclick="() => ToggleSortOnColumn(index)">
                    @header
                    <span class="ae table-sort"><i class="@GetSortIconClass(index)"></i></span>
               </AeTypography>;
  }

public class customArgs { }
customArgs emptyArgs;

private string _simple = null;
private string _tableClass => $"ae table {_inputClass}";
private string _gridStyle => $"grid-template-columns: {GetGridTemplateColumns()};";
private string _rowsStyle => $"{_gridStyle}; grid-template-rows: repeat({scrollViewResult.TakeItems},{RowHeight}px); height:{scrollViewResult.Height}px;";
private string _rowStyle => $"{_gridStyle}; grid-template-rows:{RowHeight}px;";
private string _scrollStyle => $"max-height: {MaxHeight}px;";

private (int column, bool sortAscending) _sorting = (0, true);

private ElementReference tableRef;
private ScrollView scrollView;
private ScrollViewResult scrollViewResult;
private IEnumerable<T> Rows { get => GetSortedDataset(); }

protected override void OnInitialized()
{
    base.OnInitialized();

    scrollView = new ScrollView();
    scrollViewResult = new ScrollViewResult();

    if (SimpleTable)
    {
        _simple = "simple";
        RowHeight = 22;
    }
}

protected override async Task OnAfterRenderAsync(bool firstRender)
{
await base.OnAfterRenderAsync(firstRender);
var tempHeight = Rows.Count() * RowHeight;
if (firstRender || scrollViewResult.Height != tempHeight)
{
    scrollView = await JSRuntime.InvokeAsync<ScrollView>("virtualScrolling.getScrollView", tableRef);

    scrollViewResult.Height = Rows.Count() * RowHeight;
    scrollViewResult.SkipItems = scrollView.ScrollTop / RowHeight;
    scrollViewResult.TakeItems = (int)Math.Ceiling((double)(scrollView.ScrollTop + MaxHeight) / (double)RowHeight) - scrollViewResult.SkipItems;
    StateHasChanged();
}
}


private void ToggleSortOnColumn(int column)
{
if (column == _sorting.column)
{
    _sorting.sortAscending = !_sorting.sortAscending;
}
else
{
    _sorting.column = column;
    _sorting.sortAscending = true;
}
StateHasChanged();
}

private IEnumerable<T> GetSortedDataset()
{
if (_sorting.sortAscending)
{
    return Dataset.OrderBy(data => Accessors[_sorting.column].Invoke(data));
}
else
{
    return Dataset.OrderByDescending(data => Accessors[_sorting.column].Invoke(data));
}
}

private string GetSortIconClass(int column)
{
if (column == _sorting.column)
{
    return _sorting.sortAscending ? "fad fa-sort-down" : "fad fa-sort-up";
}
return "fad fa-sort";
}

private string GetGridTemplateColumns()
{
if (string.IsNullOrWhiteSpace(GridTemplateColumns))
{
    return $"{(SimpleTable ? "minmax(0, 0.25fr)" : "")} repeat({(Headers?.Count ?? 1)}, minmax(0, 1fr))";
}
else
{
    return GridTemplateColumns;
}
}

private string GetRowColor(T row)
{
return $"ae table-row {ColorAccessor?.Invoke(row)}";
}

private async Task OnScroll()
{
scrollView = await JSRuntime.InvokeAsync<ScrollView>("virtualScrolling.getScrollView", tableRef);
scrollViewResult.Height = Rows.Count() * RowHeight;
scrollViewResult.SkipItems = scrollView.ScrollTop / RowHeight;
scrollViewResult.TakeItems = (int)Math.Ceiling((double)(scrollView.ScrollTop + scrollView.ClientHeight) / (double)RowHeight) - scrollViewResult.SkipItems;
StateHasChanged();
}

public byte[] ExportToCSVInByte()
{
var builder = new StringBuilder();
(int column, bool sortAscending) _sorting = (0, true);

foreach (var h in Headers)
{
    builder.Append(h + ",");
}
//Remove the last ,
builder.Length--;
builder.Append(Environment.NewLine);

foreach (var row in Dataset.OrderByDescending(data => Accessors[_sorting.column].Invoke(data)))
{

    foreach (var (accessor, index) in Accessors.Select((a, i) => (a, i)))
    {
        var value = accessor?.Invoke(row);
        if (value.IndexOfAny(new char[] { '"', ',' }) != -1)
        {
            builder.AppendFormat("\"{0}\"", value.Replace("\"", "\"\""));
            builder.Append(",");
        }
        else
        {
            builder.Append(accessor?.Invoke(row) + ",");
        }
    }
    //Remove the last ,
    builder.Length--;
    builder.Append(Environment.NewLine);
}
var bytes = Encoding.UTF8.GetBytes(builder.ToString());
return bytes;
}

public class ScrollView
{
public int ClientHeight { get; set; }

public int ScrollTop { get; set; }
}

public class ScrollViewResult
{
public int Height { get; set; }
public int SkipItems { get; set; }
public int TakeItems { get; set; }
}
}