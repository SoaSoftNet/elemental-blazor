@*
 Copyright 2020 Apption Corporation
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
     http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*@

@namespace Elemental.Components
@inherits HtmlElement
@inject IJSRuntime JSRuntime
@typeparam T

@if (MultiSelect)
{
<AeFlex style="flex-wrap:wrap">
    @foreach(var item in Items)
    {
        <AeFlex style="margin-right: 1em; margin-bottom: 0.3em">
            <AeCheckbox IsChecked="SelectedItems.Contains(item)" IsCheckedChanged="b => ToggleItemSelected(item,b)" />@Renderer(item)
        </AeFlex>
    }
</AeFlex>   
}
else
{
<div class="ae content-wrapper">
<select @onchange="DropdownChanged">
    @if (DefaultLabel != null)
    {                
        <option value="-1" selected="@SelectedItems.Count == 0">@DefaultLabel</option>
    }
    @for (var il = 0;il < Items.Count;il++)
    {
        var current = il;
        <option value=@current selected="@SelectedItems.Contains(Items[current])">@Renderer(Items[current])</option>                
    }
</select>
</div>    
}
@code {
    private SortedSet<T> selectedItems = new SortedSet<T>();

    [Parameter]
    public List<T> Items { get; set; }
    [Parameter]
    public string DefaultLabel { get; set; } = null;
    [Parameter]
    public string NullValue { get; set; } = "-";
    [Parameter]
    public SortedSet<T> SelectedItems {
        get
        {
            return selectedItems;
        }
        set
        {
            if (value?.Count > 1 && !MultiSelect)
            {
                selectedItems = new SortedSet<T>(value.Take(1));
            }
            else
            {
                selectedItems = value ?? new SortedSet<T>();
            }
        }}
    [Parameter]
    public EventCallback<SortedSet<T>> SelectedItemsChanged { get; set; }
    [Parameter]
    public bool MultiSelect { get; set; } = false;
    [Parameter]
    public Func<T, string> Renderer { get; set; }

    private string _wrapperClassname => $"ae dropdown-wrapper {_inputClass}";
    private string _id = $"ae-{Guid.NewGuid().ToString()}";

    private RenderFragment _labelFragment;

    private async Task DropdownChanged(ChangeEventArgs args)
    {        
        var currentIdx = Convert.ToInt32(args.Value);
        selectedItems.Clear();
        if (currentIdx >= 0)
        {
            var selectedItem = Items[currentIdx];
            selectedItems.Add(selectedItem);
            await SelectedItemsChanged.InvokeAsync(selectedItems);
        }
        else
        {
            await SelectedItemsChanged.InvokeAsync(selectedItems);            
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Renderer is null)
        {
            Renderer = item => item?.ToString() ?? NullValue;
        }

    }

    private void ToggleItemSelected(T item, bool isSelected)
    {
        if (isSelected && !selectedItems.Contains(item))
        {
            selectedItems.Add(item);
        }
        if (!isSelected)
        {
            selectedItems.Remove(item);
        }
        SelectedItemsChanged.InvokeAsync(selectedItems);
    }

}