@namespace Elemental.Components
@typeparam T
@inherits AeBaseTable<T>
@implements IPageableComponent

<div class="@_className" @attributes="InputAttributesWithoutClass">
    @if (Headers != null && Headers.Any())
    {
        <AeTableRow Header GridStyle="@_gridStyle">
            @foreach (var (header, index) in Headers.Select((h, index) => (h, index)))
            {
                @if (@CustomHeader != null)
                {
                    @CustomHeader(header, index)
                }
                else
                {
                    @DefaultHeader(header, index)
                }
            }
        </AeTableRow>
    }

    <div class="ae table-rows">
        @for (var itemIndex = 0; itemIndex < PageItems.Count; itemIndex++)
        {
            var item = getPageItem(itemIndex);
            var currentIndex = itemIndex;
            var idx = itemIndex + Page * PageSize;
            <AeTableRow @key=idx GridStyle="@_gridStyle"
                    tabindex="0"
                    @onclick="(() => OnRowClick.InvokeAsync(getPageItem(currentIndex)))"
                    @onfocus="(() => OnRowFocus.InvokeAsync(getPageItem(currentIndex)))">
                @foreach (var (accessor, index) in Accessors.Select((a, i) => (a, i)))
                {
                    if (Renderers?[index] is null)
                    {
                        <AeTableCell>
                            @accessor?.Invoke(item)
                        </AeTableCell>
                    }
                    else
                    {
                        <AeTableCell>
                            @Renderers[index](item)
                        </AeTableCell>
                    }
                }
            </AeTableRow>

        }
</div>
</div>

@code {

    [Parameter] public int PageSize { get; set; } = 5;
    [Parameter] public int Page { get; set; } = 0;

    private List<T> PageItems;
    private int? currentPage;

    private T getPageItem(int index)
    {
        return PageItems[index];
    }

    public int Total { get; set; }

    private void LoadPageItems(bool forceLoad = false)
    {
        if (forceLoad || Page != currentPage)
        {
            PageItems = Rows.Skip(Page * PageSize).Take(PageSize).ToList();
            currentPage = Page;
        }
    }

    private string _className => $"{_tableClass} paginated";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadPageItems();
    }

    protected override async Task OnParametersSetAsync()
    {
        Total = Rows.Count();
        CheckOutOfBounds();
        LoadPageItems(true);
    }

    protected override RenderFragment DefaultHeader(string header, int index)
    {
        return
    @<AeTypography class="table-cell" @onclick="() => SortAndRecalculatePageItems(index)">
        @header
        <span class="ae table-sort"><i class="@GetSortIconClass(index)"></i></span>
    </AeTypography>
    ;
    }

    private void SortAndRecalculatePageItems(int index)
    {
        ToggleSortOnColumn(index);
        LoadPageItems(true);
    }

    private void CheckOutOfBounds()
    {
        int PageCount = ((IPageableComponent)this).PageCount - 1;
        if (Page > PageCount)
        {
            Page = PageCount;
        }  
        else if (Page < 0)
        {
            Page = 0;
        }
    }

}
