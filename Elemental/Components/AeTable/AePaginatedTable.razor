@namespace Elemental.Components
@typeparam T
@inherits AeBaseTable<T>
@implements IPageableComponent

<div class="@_className" @attributes="InputAttributesWithoutClass">
  @if(Headers != null && Headers.Any()){
      <AeTableRow Header GridStyle="@_gridStyle">
        @foreach(var (header, index) in Headers.Select((h, index) => (h, index)))
        {
          @if(@CustomHeader != null){
            @CustomHeader(header, index)
          }
          else {
            @DefaultHeader(header, index)
          }
        }
      </AeTableRow>
  }

  <div class="ae table-rows">
    @foreach(var row in Rows.Skip(Page * PageSize).Take(PageSize).Select((item, i) => new { item, i}))
    {
      <AeTableRow 
        GridStyle="@_gridStyle" 
        tabindex="0"
        @onclick="(() => OnRowClick.InvokeAsync(row.item))" 
        @onfocus="(() => OnRowFocus.InvokeAsync(row.item))"
      >
        @foreach(var (accessor, index) in Accessors.Select((a, i) => (a, i)))
        {
          if(Renderers?[index] is null)
          {
            <AeTableCell>
              @accessor?.Invoke(row.item)
            </AeTableCell>
          }
          else 
          {
            <AeTableCell>
              @Renderers[index](row.item)
            </AeTableCell>
          }
        }
      </AeTableRow>
    }
  </div>    
</div>

@code {

  [Parameter] public int PageSize { get; set; } = 5;
  [Parameter] public int Page { get; set; } = 0;
  public int Total { get; set; }

  private string _className => $"{_tableClass} paginated";

  protected override void OnInitialized()
  {
    base.OnInitialized();

    Total = Rows.Count();
  }
  protected override RenderFragment DefaultHeader(string header, int index)
  {
      return
              @<AeTypography class="table-cell" @onclick="() => ToggleSortOnColumn(index)">
                  @header
                  <span class="ae table-sort"><i class="@GetSortIconClass(index)"></i></span>
              </AeTypography>;
  }

}
