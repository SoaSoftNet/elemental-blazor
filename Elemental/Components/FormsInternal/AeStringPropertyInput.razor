@typeparam T
@using System.ComponentModel.DataAnnotations
@using Elemental.Components.Forms

<div class="e e-form-control-wrapper">
    @if (!string.IsNullOrWhiteSpace(GetLabel()))
    {
        <label class="e e-form-control-label" for="@GetID()">@GetLabel()</label>
    }

    @if (HasStringLength() is null)
    {
        <Microsoft.AspNetCore.Components.Forms.InputTextArea @bind-Value="PropertyValue" />
    }
    else
    {
        <Microsoft.AspNetCore.Components.Forms.InputText @bind-Value="PropertyValue" />
    }
</div>

@code {

    [Parameter]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; }

    [Parameter]
    public T Instance { get; set; }


    public string PropertyValue
    {
        get => PropertyInfo.GetValue(Instance) as string;
        set
        {
            PropertyInfo.SetValue(Instance, value);
        }
    }

    private string GetID() => PropertyInfo.Name;

    private string GetLabel() {

        var label = AeLabelAttribute.IsDefined(PropertyInfo, typeof(AeLabelAttribute))
            ? (AeLabelAttribute.GetCustomAttribute(PropertyInfo, typeof(AeLabelAttribute)) as AeLabelAttribute).Label
            : PropertyInfo.Name;

        return  label + (IsRequired() ? "" : " (Optional)");
    }

    private bool IsRequired()
    {
        return RequiredAttribute.IsDefined(PropertyInfo, typeof(RequiredAttribute));
    }

    private int? HasStringLength()
    {
        var att = StringLengthAttribute.GetCustomAttribute(PropertyInfo, typeof(StringLengthAttribute)) as StringLengthAttribute;
        return att?.MaximumLength;
    }

}
