@typeparam T
@using Elemental.Components.Forms
@using Microsoft.AspNetCore.Components.Forms

<AeFormLabel PropertyInfo="@PropertyInfo" />

<Microsoft.AspNetCore.Components.Forms.InputNumber class="ae input" @bind-Value="PropertyValue" DisplayName="GetLabel()" @onblur="UpdateModel" />

<div class="errortext">
    <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(AeModelFormTools.GetExpression<T>(Instance,PropertyInfo))" />
</div>


@code {

    [Parameter]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; }

    //[Parameter]
    //public EventCallback<ModelFormChangeArgs> ValueChanged { get; set; }

    /// <summary>
    /// There are two major layout options. Standard has line based with label / field and compact has a tabular layout with CSS flex.
    /// </summary>
    [Parameter] public ModelFormStyle ModelFormStyle { get; set; }

    [Parameter]
    public object Instance { get; set; }

    public T PropertyValue
    {
        get
        {
            var val = PropertyInfo.GetValue(Instance);
            if (val is null) return default(T);
            return (T)val;
        }
        set
        {
            PropertyInfo.SetValue(Instance, value);

        }
    }

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [CascadingParameter(Name = "LabelForPropertyFunc")]
    public Func<string, string> LabelForPropertyFunc { get; set; } = null;

    [CascadingParameter(Name = "ModelFormContext")]
    public ModelFormContext<T> ModelFormContext { get; set; } = null;

    [CascadingParameter(Name = "Notifier")]
    public Func<ModelFormArgsInternal, Task> Notifier { get; set; }

    private string GetLabel()
    {
        return AeModelFormTools.GetLabel(PropertyInfo, LabelForPropertyFunc, false);
    }

    private async Task UpdateModel()
    {
        await Notifier(new ModelFormArgsInternal() { PropertyInfo = PropertyInfo, EditContext = new EditContext(PropertyInfo) });
        //await OnChangeCallback.InvokeAsync(new ModelFormChangeArgs() { Context = ModelFormContext<T>, PropertyInfo = PropertyInfo, EditContext = new EditContext(PropertyInfo) });
        //OnChangeCallback.InvokeAsync(null).GetAwaiter().GetResult();
        // return ValueChanged.InvokeAsync(new ModelFormChangeArgs() { Context = ModelFormContext<T>, PropertyInfo = PropertyInfo, EditContext = new EditContext(PropertyInfo) });
    }

    private string GetID() => PropertyInfo.Name;


}
