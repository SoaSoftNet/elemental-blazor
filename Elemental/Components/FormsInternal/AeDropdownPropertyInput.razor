@typeparam T
@using System.ComponentModel.DataAnnotations
@using Elemental.Components.Forms
@using System.Reflection
@using Microsoft.AspNetCore.Components.Forms

    <AeFormLabel PropertyInfo="@PropertyInfo" ShowOptional="false"/>
 
    @if (HasValidValues())
    {
        <Microsoft.AspNetCore.Components.Forms.InputSelect @bind-Value="PropertyValue" class="ae input">
            @if (!AeModelFormTools.IsRequired(PropertyInfo))
            {
            <option value="">@GetPlaceholder()</option>
            }
            @foreach (var value in getValidValues())
            {
            <option value="@value">@(GetLabel(value))</option>
            }
        </Microsoft.AspNetCore.Components.Forms.InputSelect>
    }
    else
    {
        <select class="ae input"><option value="-">-</option></select>
    }

@code {
    [Parameter]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; }

    [Parameter]
    public T Instance { get; set; }

    [Parameter] public ModelFormStyle ModelFormStyle { get; set; }

    private IEnumerable<string> getValidValues()
    {
        return ModelFormContext.GetValidValues(PropertyInfo);
    }

    private bool HasValidValues()
    {
        return ModelFormContext.GetValidValues(PropertyInfo) != null;
    }

    private string GetPlaceholder()
    {
        var label = AeModelFormTools.GetPlaceHolder(PropertyInfo);
        if (string.IsNullOrWhiteSpace(label))
            return "-";
        return label;
    }       

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var firstValue = getValidValues()?.FirstOrDefault();
        if (firstRender && AeModelFormTools.IsRequired(PropertyInfo) && firstValue != null)
        {
            PropertyValue = firstValue;
        }
    }

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [CascadingParameter(Name= "LabelForPropertyFunc")]
    public Func<string,string> LabelForPropertyFunc { get; set; } = null;

    [CascadingParameter(Name= "ModelFormContext")]
    public ModelFormContext<T> ModelFormContext { get; set; } = null;

    [CascadingParameter(Name= "OnChangeCallback")]
    public EventCallback<ModelFormChangeArgs<T>> OnChangeCallback { get; set; }

    private string GetLabel(string value)
    {
        if (LabelForPropertyFunc != null)
        {
            return LabelForPropertyFunc(value);
        }
        else
        {
            return AeModelFormTools.Labelize(value);
        }
    }



    public string PropertyValue
    {
        get => PropertyInfo.GetValue(Instance) as string;
        set
        {            
            PropertyInfo.SetValue(Instance, value);
            OnChangeCallback.InvokeAsync(new ModelFormChangeArgs<T>() { Context = ModelFormContext, PropertyInfo = PropertyInfo, EditContext = new EditContext(PropertyInfo) });
        }
    }

    private string GetID() => PropertyInfo.Name;



    private int? HasStringLength()
    {
        var att = StringLengthAttribute.GetCustomAttribute(PropertyInfo, typeof(StringLengthAttribute)) as StringLengthAttribute;
        return att?.MaximumLength;
    }

}
